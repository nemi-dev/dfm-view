@import "./defs.scss";

.Rarity_Common {
  color: var(--color-common);
  --color: var(--color-common);
}
.Rarity_Uncommon {
  color: var(--color-uncommon);
  --color: var(--color-uncommon);
}
.Rarity_Rare {
  color: var(--color-rare);
  --color: var(--color-rare);
}
.Rarity_Unique {
  color: var(--color-unique);
  --color: var(--color-unique);
}
.Rarity_Epic {
  color: var(--color-epic);
  --color: var(--color-epic);
}

.ItemName { align-self: center; }

.Hovering, .Active {
  box-sizing: border-box;
  border-width: 1px;
  border-radius: 5px;
  border-color: transparent;
  border-style: solid;

  transition-duration: 0.1s;
  transition-timing-function: linear;
  transition-property: background-color, border-color, color;

  &:hover, &.Active {
    background-color: rgba($color: #ffae00, $alpha: 0.1);
    border-color: rgba($color: #ffd67e, $alpha: 1.0);
  }
}


.Bordered {
  border: 1px solid rgba($color: #ffffff, $alpha: 0.5);
  border-radius: 5px;
  box-sizing: border-box;
}




.Hovery, :is(input[type=text], input[type=number]).Hovery {

  border: 1px solid transparent;
  border-radius: 19px;
  transition-property: color, border-color, background-color;
  transition-duration: 0.1s;
  transition-timing-function: linear;

  &:hover, &:focus {
    border-color: rgba($color: #ffd67e, $alpha: 1.0);
  }
}

.FormDF {
  display: flex;
  align-items: center;
  justify-content: space-evenly;

  min-height: 20px;
  padding-block: 2px;
  padding-inline: 2px;
  background-color: rgba($color: #000000, $alpha: 0.3);
  border-radius: 20px;

  input[type=text], input[type=number] {
    @extend .Hovery;
    text-align: center;
    font-size: 1em;
    min-height: 26px;
    box-sizing: border-box;
  }

  > .FormDFName {
    font-weight: 400;
    text-align: center;
    flex-grow: 1;
    font-size: 0.8rem;
    cursor: default;
    line-height: 22px;
  }

  .FormDFValue {
    flex-grow: 2;
  }


  input {
    padding: 0!important;
  }

  input[type=number], input[type=text] {
    border-radius: 20px;
    background-color: rgba($color: #000000, $alpha: 0.3);
  }

  input[type=checkbox], input[type=radio] {
    display: none;
  }

  .AttrItem {
    padding-block: 0!important;
  }

}


.OneClickGroup {
  button {
    font-size: 0.8rem;
    min-height: 26px;
    box-sizing: border-box;
    border-radius: 19px;
  }
}

.DisposableInput {
  background-color: rgba($color: #000000, $alpha: 0.3);
  display: flex;
  border-radius: 30px;
  align-items: center;
  justify-content: center;
  max-height: 30px;

  input[type=number], input[type=text] {
    font-size: 0.9rem;
    background-color: transparent;
    padding: 0;
    flex-grow: 1;
  }

  button {
    outline: none;
    border-radius: 20px;
    width: 20px;
    height: 20px;
    padding: 0;
    vertical-align: baseline;
    background-color: transparent;
  }

  &:only-child button {
    display: none;
  }
}

.InputArea {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.SlotHeading {
  display: flex;
  color: var(--color);
  padding: 2px;
}


%FramedIcon {

  --frame-offset: calc(var(--icon-size) * 3 / 80);
  --frame-size: calc(var(--icon-size) + var(--frame-offset) * 2);
  
  user-select: none;
  position: relative;

  width: var(--frame-size);
  height: var(--frame-size);

  img.IconImage {
    display: block;
    position: relative;
    width: var(--icon-size);
    left: var(--frame-offset);
    top: var(--frame-offset);
  }

  img.IconFrame {
    display: block;
    position: absolute;
    width: var(--frame-size);
    top: 0;
    left: 0;
  }
}

.SquareIcon {
  @extend %FramedIcon;
}


.RoundIcon {
  @extend %FramedIcon;
  clip-path: circle(50%);
  
  img.IconImage {
    border-radius: 50%;
  }
}


.CrackIcon {
  --icon-size: 64px;
}